
package com.mycompany.princeheartclinic;

import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;


public class MedicalConditions extends javax.swing.JFrame {

    /**
     * Creates new form MedicalConditions
     */
    public MedicalConditions() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        patientmodule = new javax.swing.JButton();
        medicalcondition = new javax.swing.JButton();
        familyhistory = new javax.swing.JButton();
        clinicteam = new javax.swing.JButton();
        riskassessment = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        referralmanagement = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        medicalconditionIdLabel = new javax.swing.JLabel();
        mcid = new javax.swing.JTextField();
        patientIdLabel = new javax.swing.JLabel();
        patientid = new javax.swing.JTextField();
        medicalconditionLabel = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        bpsytolic = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        bpdiastolic = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        bpm = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        hypertension = new javax.swing.JComboBox<>();
        jButton9 = new javax.swing.JButton();
        cholesterallevel = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        ecgresults = new javax.swing.JTextField();
        viewrecord = new javax.swing.JButton();
        updatemedicalconditionButton = new javax.swing.JButton();
        editmedicalconditionButton = new javax.swing.JButton();
        deletemedicalconditionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicalconditiontbl = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("MEDICAL CONDITIONS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(416, 416, 416)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        patientmodule.setText("PATIENT'S MODULE");
        patientmodule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientmoduleActionPerformed(evt);
            }
        });

        medicalcondition.setText("MEDICAL CONDITION");
        medicalcondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalconditionActionPerformed(evt);
            }
        });

        familyhistory.setText("FAMILY HISTORY");
        familyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyhistoryActionPerformed(evt);
            }
        });

        clinicteam.setText("CLINIC TEAM");
        clinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicteamActionPerformed(evt);
            }
        });

        riskassessment.setText("RISK ASSESSMENT");
        riskassessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riskassessmentActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Prince Heart Clinic");

        referralmanagement.setText("REFERRAL MANAGEMENT");
        referralmanagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referralmanagementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(riskassessment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(clinicteam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(familyhistory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patientmodule, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(medicalcondition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(referralmanagement, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(patientmodule)
                .addGap(60, 60, 60)
                .addComponent(medicalcondition)
                .addGap(60, 60, 60)
                .addComponent(familyhistory)
                .addGap(60, 60, 60)
                .addComponent(clinicteam)
                .addGap(60, 60, 60)
                .addComponent(riskassessment)
                .addGap(60, 60, 60)
                .addComponent(referralmanagement)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        backbtn.setBackground(new java.awt.Color(0, 204, 153));
        backbtn.setText("BACK");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        exitbtn.setBackground(new java.awt.Color(153, 0, 0));
        exitbtn.setText("EXIT");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        medicalconditionIdLabel.setText("Medical ConditionId");

        mcid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcidActionPerformed(evt);
            }
        });

        patientIdLabel.setText("Patient Id");

        medicalconditionLabel.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        medicalconditionLabel.setText("MEDICAL CONDITIONS:");

        jButton5.setText("BLOOD PRESSURE SYTOLIC");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("BLOOD PRESSURE DIASTOLIC");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("HEART RATE (bpm)");
        jButton7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("HYPERTENSION");
        jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        hypertension.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YES", "NO" }));

        jButton9.setText("CHOLESTERAL LEVEL (mgdl)");
        jButton9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("ECG RESULTS");
        jButton10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        viewrecord.setBackground(new java.awt.Color(0, 153, 153));
        viewrecord.setText("VIEW RECORDS");
        viewrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewrecordActionPerformed(evt);
            }
        });

        updatemedicalconditionButton.setBackground(new java.awt.Color(102, 255, 51));
        updatemedicalconditionButton.setText("ADD MEDICAL CONDITION");
        updatemedicalconditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatemedicalconditionButtonActionPerformed(evt);
            }
        });

        editmedicalconditionButton.setBackground(new java.awt.Color(255, 153, 51));
        editmedicalconditionButton.setText("EDIT MEDICAL CONDITION");
        editmedicalconditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editmedicalconditionButtonActionPerformed(evt);
            }
        });

        deletemedicalconditionButton.setBackground(new java.awt.Color(255, 0, 0));
        deletemedicalconditionButton.setText("DELETE MEDICAL CONDITION");
        deletemedicalconditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletemedicalconditionButtonActionPerformed(evt);
            }
        });

        medicalconditiontbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medical ConditionId", "Patient Id", "Blood Pressure Sytolic", "Blood Pressure Diastolic", "HeartRate", "Hypertension", "Cholesteral Level", "ECG Results"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        medicalconditiontbl.setRowHeight(25);
        medicalconditiontbl.setSelectionBackground(new java.awt.Color(102, 0, 102));
        medicalconditiontbl.setShowGrid(true);
        medicalconditiontbl.setShowHorizontalLines(false);
        medicalconditiontbl.setShowVerticalLines(false);
        jScrollPane1.setViewportView(medicalconditiontbl);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(backbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exitbtn))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(medicalconditionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(medicalconditionIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(patientIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(126, 126, 126)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(mcid)
                                                    .addComponent(patientid)
                                                    .addComponent(ecgresults)
                                                    .addComponent(cholesterallevel, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(bpm, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(bpdiastolic)
                                                    .addComponent(bpsytolic, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(hypertension, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(viewrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(updatemedicalconditionButton)
                                        .addGap(47, 47, 47)
                                        .addComponent(editmedicalconditionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48)
                                        .addComponent(deletemedicalconditionButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(157, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(medicalconditionIdLabel))
                    .addComponent(mcid, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(medicalconditionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(bpsytolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(bpdiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(bpm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(hypertension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(cholesterallevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(ecgresults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(updatemedicalconditionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editmedicalconditionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deletemedicalconditionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitbtn)
                    .addComponent(backbtn)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        new Welcome().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitbtnActionPerformed

    private void medicalconditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalconditionActionPerformed
        MedicalConditions obj = new MedicalConditions();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_medicalconditionActionPerformed

    private void familyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyhistoryActionPerformed
        FamilyHistory obj = new FamilyHistory();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_familyhistoryActionPerformed

    private void clinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicteamActionPerformed
       ClinicTeam obj = new ClinicTeam();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_clinicteamActionPerformed

    private void riskassessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riskassessmentActionPerformed
         riskassessment obj = new riskassessment();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_riskassessmentActionPerformed

    private void mcidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcidActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void viewrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewrecordActionPerformed
        // TODO add your handling code here:
        try {
            // Establish database connection
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb", "root", "");

            // Create a statement to execute the SQL query
            Statement st = con.createStatement();

            // Execute the SQL query to retrieve data from the medicalconditiontbl table
            ResultSet rs = st.executeQuery("SELECT * FROM medicalconditiontbl");

            // Get the table model associated with jTable1
            DefaultTableModel tm = (DefaultTableModel) medicalconditiontbl.getModel();

            // Clear existing rows in the table model
            tm.setRowCount(0);

            // Iterate through the result set and add data to the table model
            while (rs.next()) {
                Object[] rowData = {
                    rs.getInt("MedicalConditionId"),
                    rs.getInt("PatientId"),
                    rs.getBigDecimal("BloodPressureSytolic"),
                    rs.getBigDecimal("BloodPressureDiastolic"),
                    rs.getInt("HeartRate"),
                    rs.getString("Hypertension"),
                    rs.getBigDecimal("CholesteralLevel"),
                    rs.getString("ECGResults")
                };

                // Add the row data to the table model
                tm.addRow(rowData);
            }

            // Close the result set, statement, and connection
            rs.close();
            st.close();
            con.close();

        } catch (Exception e) {
            // Display an error message if an exception occurs
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_viewrecordActionPerformed

    private void updatemedicalconditionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatemedicalconditionButtonActionPerformed
        // TODO add your handling code here:
        if(mcid.getText().isEmpty() && patientid.getText().isEmpty() && bpsytolic.getText().isEmpty()
            && bpdiastolic.getText().isEmpty()&& bpm.getText().isEmpty()
            && hypertension.getSelectedItem() == null&&
            cholesterallevel.getText().isEmpty() && ecgresults.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Missing details!");
        }else{

        }
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

            // Check if the patientId exists in the patienttbl table before inserting
            String checkPatientQuery = "SELECT COUNT(*) FROM patienttbl WHERE PatientId=?";
            PreparedStatement checkPatientStmt = con.prepareStatement(checkPatientQuery);
            checkPatientStmt.setInt(1, Integer.parseInt(patientid.getText()));
            ResultSet rs = checkPatientStmt.executeQuery();
            rs.next();
            int patientCount = rs.getInt(1);

            if (patientCount == 0) {
                JOptionPane.showMessageDialog(this, "Patient with the specified ID does not exist!");
            } else {
                // If the patientId exists, proceed with the insertion
                String sql = "INSERT INTO medicalconditiontbl VALUES (?, ?, ?, ?,?,?,?,?)";
                PreparedStatement ptst = con.prepareStatement(sql);
                ptst.setInt(1, Integer.parseInt(mcid.getText()));
                ptst.setInt(2, Integer.parseInt(patientid.getText()));
                ptst.setString(3, bpsytolic.getText());
                ptst.setString(4, bpdiastolic.getText());
                ptst.setString(5, bpm.getText());
                ptst.setString(6, hypertension.getSelectedItem().toString());
                ptst.setString(7, cholesterallevel.getText());
                ptst.setString(8, ecgresults.getText());

                ptst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Medical condition added successfully!");

                // Clear text fields after successful insertion
                mcid.setText("");
                patientid.setText("");
                bpsytolic.setText("");
                bpdiastolic.setText("");
                bpm.setText("");
                hypertension.setSelectedIndex(-1);
                cholesterallevel.setText("");
                ecgresults.setText("");
            }

            con.close();

        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_updatemedicalconditionButtonActionPerformed

    private void editmedicalconditionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editmedicalconditionButtonActionPerformed
        // TODO add your handling code here:
        if(mcid.getText().isEmpty() && patientid.getText().isEmpty() && bpsytolic.getText().isEmpty()
            && bpdiastolic.getText().isEmpty()&& bpm.getText().isEmpty()
            && hypertension.getSelectedItem() == null&&
            cholesterallevel.getText().isEmpty() && ecgresults.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Missing details!");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

                // Check if the medical condition ID exists in the medicalconditiontbl table
                String checkIfExistsQuery = "SELECT COUNT(*) FROM medicalconditiontbl WHERE MedicalConditionId=?";
                PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
                checkIfExistsStmt.setInt(1, Integer.parseInt(mcid.getText()));
                ResultSet rs = checkIfExistsStmt.executeQuery();
                rs.next();
                int Count = rs.getInt(1);

                if (Count == 0) {
                    JOptionPane.showMessageDialog(this, "Medical condition with the specified ID does not exist!");
                } else {
                    // If the medical condition ID exists, proceed with the update
                    String sql = "UPDATE medicalconditiontbl SET PatientId=?, MedicalCondition=?, Description=? WHERE MedicalConditionId=?";
                    PreparedStatement ptst = con.prepareStatement(sql);
                    ptst.setInt(1, Integer.parseInt(mcid.getText()));
                    ptst.setInt(2, Integer.parseInt(patientid.getText()));
                    ptst.setString(3, bpsytolic.getText());
                    ptst.setString(4, bpdiastolic.getText());
                    ptst.setString(5, bpm.getText());
                    ptst.setString(6, hypertension.getSelectedItem().toString());
                    ptst.setString(7, cholesterallevel.getText());
                    ptst.setString(8, ecgresults.getText());

                    ptst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Medical condition updated successfully!");

                    // Clear text fields after successful update
                    mcid.setText("");
                    patientid.setText("");
                    bpsytolic.setText("");
                    bpdiastolic.setText("");
                    bpm.setText("");
                    hypertension.setSelectedIndex(-1);
                    cholesterallevel.setText("");
                    ecgresults.setText("");
                }

                con.close();

            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_editmedicalconditionButtonActionPerformed

    private void deletemedicalconditionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletemedicalconditionButtonActionPerformed
        // TODO add your handling code here:
        if(mcid.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the Medical Condition ID to delete!");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

                // Check if the medical condition ID exists in the medicalconditiontbl table
                String checkIfExistsQuery = "SELECT COUNT(*) FROM medicalconditiontbl WHERE MedicalConditionId=?";
                PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
                checkIfExistsStmt.setInt(1, Integer.parseInt(mcid.getText()));
                ResultSet rs = checkIfExistsStmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "Medical condition with the specified ID does not exist!");
                } else {
                    // If the medical condition ID exists, proceed with the deletion
                    String deleteQuery = "DELETE FROM medicalconditiontbl WHERE MedicalConditionId=?";
                    PreparedStatement deleteStmt = con.prepareStatement(deleteQuery);
                    deleteStmt.setInt(1, Integer.parseInt(mcid.getText()));

                    int rowsAffected = deleteStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Medical condition deleted successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete medical condition!");
                    }

                    // Clear the Medical Condition ID field after deletion
                    mcid.setText("");
                }

                con.close();

            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_deletemedicalconditionButtonActionPerformed

    private void referralmanagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referralmanagementActionPerformed
         ReferralManagement obj = new ReferralManagement();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_referralmanagementActionPerformed

    private void patientmoduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientmoduleActionPerformed
        Patients obj = new Patients();
        obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_patientmoduleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicalConditions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicalConditions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicalConditions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicalConditions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicalConditions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbtn;
    private javax.swing.JTextField bpdiastolic;
    private javax.swing.JTextField bpm;
    private javax.swing.JTextField bpsytolic;
    private javax.swing.JTextField cholesterallevel;
    private javax.swing.JButton clinicteam;
    private javax.swing.JButton deletemedicalconditionButton;
    private javax.swing.JTextField ecgresults;
    private javax.swing.JButton editmedicalconditionButton;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton familyhistory;
    private javax.swing.JComboBox<String> hypertension;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mcid;
    private javax.swing.JButton medicalcondition;
    private javax.swing.JLabel medicalconditionIdLabel;
    private javax.swing.JLabel medicalconditionLabel;
    private javax.swing.JTable medicalconditiontbl;
    private javax.swing.JLabel patientIdLabel;
    private javax.swing.JTextField patientid;
    private javax.swing.JButton patientmodule;
    private javax.swing.JButton referralmanagement;
    private javax.swing.JButton riskassessment;
    private javax.swing.JButton updatemedicalconditionButton;
    private javax.swing.JButton viewrecord;
    // End of variables declaration//GEN-END:variables
}
