/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.princeheartclinic;

import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

public class FamilyHistory extends javax.swing.JFrame {

    /**
     * Creates new form FamilyHistory
     */
    public FamilyHistory() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patientmodule = new javax.swing.JButton();
        medicalcondition = new javax.swing.JButton();
        familyhistory = new javax.swing.JButton();
        clinicteam = new javax.swing.JButton();
        riskassessment = new javax.swing.JButton();
        referralmanagement = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        familyhistoryIdLabel = new javax.swing.JLabel();
        familyhistoryId = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        patientid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        rlshp = new javax.swing.JComboBox<>();
        medicalconditionLabel = new javax.swing.JLabel();
        mc = new javax.swing.JComboBox<>();
        viewrecord = new javax.swing.JButton();
        addfamilyhistory = new javax.swing.JButton();
        editfamilyhistory = new javax.swing.JButton();
        deletefamilyhistory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        familyhistorytbl = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FAMILY HISTORY");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(347, 347, 347)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(549, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Prince Heart Clinic");

        patientmodule.setText("PATIENT'S MODULE");
        patientmodule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientmoduleActionPerformed(evt);
            }
        });

        medicalcondition.setText("MEDICAL CONDITION");
        medicalcondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalconditionActionPerformed(evt);
            }
        });

        familyhistory.setText("FAMILY HISTORY");
        familyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyhistoryActionPerformed(evt);
            }
        });

        clinicteam.setText("CLINIC TEAM");
        clinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicteamActionPerformed(evt);
            }
        });

        riskassessment.setText("RISK ASSESSMENT");
        riskassessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riskassessmentActionPerformed(evt);
            }
        });

        referralmanagement.setText("REFERRAL MANAGEMENT");
        referralmanagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referralmanagementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(riskassessment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(clinicteam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(familyhistory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patientmodule, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(medicalcondition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(referralmanagement, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(patientmodule)
                .addGap(60, 60, 60)
                .addComponent(medicalcondition)
                .addGap(60, 60, 60)
                .addComponent(familyhistory)
                .addGap(60, 60, 60)
                .addComponent(clinicteam)
                .addGap(60, 60, 60)
                .addComponent(riskassessment)
                .addGap(60, 60, 60)
                .addComponent(referralmanagement)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        backbtn.setBackground(new java.awt.Color(0, 204, 153));
        backbtn.setText("BACK");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        exitbtn.setBackground(new java.awt.Color(153, 0, 0));
        exitbtn.setText("EXIT");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        familyhistoryIdLabel.setText("Family HistoryId");

        familyhistoryId.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        familyhistoryId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyhistoryIdActionPerformed(evt);
            }
        });

        jLabel26.setText("Patient Id");

        patientid.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        patientid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientidActionPerformed(evt);
            }
        });

        jLabel6.setText("Relationship");

        rlshp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Father", "Mother", "Son", "Daughter", "Brother", "Sister", "Half Brother", "Half Sister", "Niece", "Nephew", "Grandson", "Granddaughter", "Maternal Grandmother", "Maternal Grandfather", "Maternal Uncle", "Maternal Aunt", "Maternal Cousin", "Paternal Grandmother", "Paternal Grandfather", "Paternal Uncle", "Paternal Aunt", "Paternal Cousin", " " }));
        rlshp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rlshpActionPerformed(evt);
            }
        });

        medicalconditionLabel.setText("Medical Condition");

        mc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Diabetes", "Hypertension", "Heart Failure", "Cholestral" }));
        mc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcActionPerformed(evt);
            }
        });

        viewrecord.setBackground(new java.awt.Color(0, 153, 153));
        viewrecord.setText("VIEW RECORDS");
        viewrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewrecordActionPerformed(evt);
            }
        });

        addfamilyhistory.setBackground(new java.awt.Color(102, 255, 51));
        addfamilyhistory.setText("ADD FAMILY HISTORY");
        addfamilyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addfamilyhistoryActionPerformed(evt);
            }
        });

        editfamilyhistory.setBackground(new java.awt.Color(255, 153, 51));
        editfamilyhistory.setText("EDIT FAMILY HISTORY");
        editfamilyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editfamilyhistoryActionPerformed(evt);
            }
        });

        deletefamilyhistory.setBackground(new java.awt.Color(255, 0, 0));
        deletefamilyhistory.setText("DELETE FAMILY HISTORY");
        deletefamilyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletefamilyhistoryActionPerformed(evt);
            }
        });

        familyhistorytbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Family HistoryId", "Patient Id", "Relationship", "Medical ConditionId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Short.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        familyhistorytbl.setRowHeight(25);
        familyhistorytbl.setSelectionBackground(new java.awt.Color(102, 0, 102));
        familyhistorytbl.setShowGrid(true);
        familyhistorytbl.setShowHorizontalLines(false);
        familyhistorytbl.setShowVerticalLines(false);
        jScrollPane1.setViewportView(familyhistorytbl);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(backbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitbtn)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(medicalconditionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(familyhistoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rlshp, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(mc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(addfamilyhistory)
                                                .addGap(76, 76, 76)
                                                .addComponent(editfamilyhistory, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(121, 121, 121)
                                                .addComponent(deletefamilyhistory))))
                                    .addComponent(familyhistoryIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(familyhistoryIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(familyhistoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rlshp, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicalconditionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletefamilyhistory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editfamilyhistory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addfamilyhistory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addGap(142, 142, 142)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitbtn)
                    .addComponent(backbtn)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        new Welcome().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitbtnActionPerformed

    private void patientmoduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientmoduleActionPerformed
        Patients obj = new Patients();
        obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_patientmoduleActionPerformed

    private void medicalconditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalconditionActionPerformed
        MedicalConditions obj = new MedicalConditions();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_medicalconditionActionPerformed

    private void familyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyhistoryActionPerformed
        FamilyHistory obj = new FamilyHistory();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_familyhistoryActionPerformed

    private void clinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicteamActionPerformed
        ClinicTeam obj = new ClinicTeam();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_clinicteamActionPerformed

    private void riskassessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riskassessmentActionPerformed
         riskassessment obj = new riskassessment();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_riskassessmentActionPerformed

    private void referralmanagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referralmanagementActionPerformed
        ReferralManagement obj = new ReferralManagement();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_referralmanagementActionPerformed

    private void familyhistoryIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyhistoryIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_familyhistoryIdActionPerformed

    private void patientidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientidActionPerformed

    private void rlshpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rlshpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rlshpActionPerformed

    private void mcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcActionPerformed

    private void viewrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewrecordActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");
            Statement st = con.createStatement();
            String sql = "Select * from familyhistory";
            PreparedStatement ptst = con.prepareStatement(sql);
            ResultSet rs = ptst.executeQuery();
            DefaultTableModel tm = (DefaultTableModel)familyhistorytbl.getModel();
            tm.setRowCount(0);
            while (rs.next()){
                Object o[] = {rs.getInt("FamilyHistoryId"),rs.getInt("PatientId"),rs.getString("Relationship"),rs.getString("MedicalCondition"),
                };
                tm.addRow(o);
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_viewrecordActionPerformed

    private void addfamilyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addfamilyhistoryActionPerformed
        // TODO add your handling code here:
        if (familyhistoryId.getText().isEmpty() && patientid.getText().isEmpty() && rlshp.getSelectedItem() == null && mc.getSelectedItem() == null) {

            JOptionPane.showMessageDialog(this, "Missing details!");
        }else{

        }
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

            // Check if the patientId exists in the patienttbl table before inserting
            String checkPatientQuery = "SELECT COUNT(*) FROM patienttbl WHERE PatientId=?";
            PreparedStatement checkPatientStmt = con.prepareStatement(checkPatientQuery);
            checkPatientStmt.setInt(1, Integer.parseInt(patientid.getText()));
            ResultSet rs = checkPatientStmt.executeQuery();
            rs.next();
            int patientCount = rs.getInt(1);

            if (patientCount == 0) {
                JOptionPane.showMessageDialog(this, "Patient with the specified ID does not exist!");
            } else {
                // If the patientId exists, proceed with the insertion
                String sql = "INSERT INTO familyhistory VALUES (?, ?, ?, ?)";
                PreparedStatement ptst = con.prepareStatement(sql);
                ptst.setInt(1, Integer.parseInt(familyhistoryId.getText()));
                ptst.setInt(2, Integer.parseInt(patientid.getText()));
                ptst.setString(3, rlshp.getSelectedItem().toString());
                ptst.setString(4, mc.getSelectedItem().toString());

                ptst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Family History condition added successfully!");

                familyhistoryId.setText("");
                patientid.setText("");
                rlshp.setSelectedIndex(-1); // Clear selection in the combo box
                mc.setSelectedIndex(-1); // Clear selection in the combo box
            }

            con.close();

        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_addfamilyhistoryActionPerformed

    private void editfamilyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editfamilyhistoryActionPerformed
        // TODO add your handling code here:
        if (familyhistoryId.getText().isEmpty()
            || patientid.getText().isEmpty()
            || rlshp.getSelectedItem().toString().isEmpty()
            || mc.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Missing details!");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb", "root", "");

                // Check if the family history ID exists in the familyhistory table
                String checkIfExistsQuery = "SELECT COUNT(*) FROM familyhistory WHERE FamilyHistoryId=?";
                PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
                checkIfExistsStmt.setInt(1, Integer.parseInt(familyhistoryId.getText()));
                ResultSet rs = checkIfExistsStmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "Family History condition with the specified ID does not exist!");
                } else {
                    // If the family history ID exists, proceed with the update
                    String sql = "UPDATE familyhistory SET PatientId=?, Relationship=?, MedicalCondition=? WHERE FamilyHistoryId=?";
                    PreparedStatement ptst = con.prepareStatement(sql);
                    ptst.setInt(1, Integer.parseInt(patientid.getText()));
                    ptst.setString(2, rlshp.getSelectedItem().toString());
                    ptst.setString(3, mc.getSelectedItem().toString());
                    ptst.setInt(4, Integer.parseInt(familyhistoryId.getText()));

                    ptst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Family History condition updated successfully!");

                    // Clear text fields after successful update
                    familyhistoryId.setText("");
                    patientid.setText("");
                    rlshp.setSelectedIndex(-1); // Clear selection in the combo box
                    mc.setSelectedIndex(-1); // Clear selection in the combo box
                }

                con.close();

            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_editfamilyhistoryActionPerformed

    private void deletefamilyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletefamilyhistoryActionPerformed
        // TODO add your handling code here:
        if(familyhistoryId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the Family History ID to delete!");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

                // Check if the medical condition ID exists in the medicalconditiontbl table
                String checkIfExistsQuery = "SELECT COUNT(*) FROM familyhistory WHERE FamilyHistoryId=?";
                PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
                checkIfExistsStmt.setInt(1, Integer.parseInt(familyhistoryId.getText()));
                ResultSet rs = checkIfExistsStmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "Family History condition with the specified ID does not exist!");
                } else {
                    // If the medical condition ID exists, proceed with the deletion
                    String deleteQuery = "DELETE FROM familyhistory WHERE FamilyHistoryId=?";
                    PreparedStatement deleteStmt = con.prepareStatement(deleteQuery);
                    deleteStmt.setInt(1, Integer.parseInt(familyhistoryId.getText()));

                    int rowsAffected = deleteStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Family History deleted successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete Family History!");
                    }

                    // Clear the Medical Condition ID field after deletion
                    familyhistoryId.setText("");
                }

                con.close();

            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_deletefamilyhistoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FamilyHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addfamilyhistory;
    private javax.swing.JButton backbtn;
    private javax.swing.JButton clinicteam;
    private javax.swing.JButton deletefamilyhistory;
    private javax.swing.JButton editfamilyhistory;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton familyhistory;
    private javax.swing.JTextField familyhistoryId;
    private javax.swing.JLabel familyhistoryIdLabel;
    private javax.swing.JTable familyhistorytbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mc;
    private javax.swing.JButton medicalcondition;
    private javax.swing.JLabel medicalconditionLabel;
    private javax.swing.JTextField patientid;
    private javax.swing.JButton patientmodule;
    private javax.swing.JButton referralmanagement;
    private javax.swing.JButton riskassessment;
    private javax.swing.JComboBox<String> rlshp;
    private javax.swing.JButton viewrecord;
    // End of variables declaration//GEN-END:variables
}
