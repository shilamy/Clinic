/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.princeheartclinic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ClinicTeam extends javax.swing.JFrame {

    /**
     * Creates new form ClinicTeam
     */
    public ClinicTeam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patientmodule = new javax.swing.JButton();
        medicalcondition = new javax.swing.JButton();
        familyhistory = new javax.swing.JButton();
        clinicteam = new javax.swing.JButton();
        riskassessment = new javax.swing.JButton();
        referralmanagement = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        clinicmemberIdLabel = new javax.swing.JLabel();
        clinicmemberId = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        specializationLabel = new javax.swing.JLabel();
        specialization = new javax.swing.JComboBox<>();
        viewrecord = new javax.swing.JButton();
        addclinicteam = new javax.swing.JButton();
        editclinicteam = new javax.swing.JButton();
        deleteclinicteam = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clinicteamtbl = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CLINIC TEAM");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(489, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(407, 407, 407))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        jLabel2.setFont(new java.awt.Font("Cambria Math", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Prince Heart Clinic");

        patientmodule.setText("PATIENT'S MODULE");
        patientmodule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientmoduleActionPerformed(evt);
            }
        });

        medicalcondition.setText("MEDICAL CONDITION");
        medicalcondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalconditionActionPerformed(evt);
            }
        });

        familyhistory.setText("FAMILY HISTORY");
        familyhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyhistoryActionPerformed(evt);
            }
        });

        clinicteam.setText("CLINIC TEAM");
        clinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicteamActionPerformed(evt);
            }
        });

        riskassessment.setText("RISK ASSESSMENT");
        riskassessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                riskassessmentActionPerformed(evt);
            }
        });

        referralmanagement.setText("REFERRAL MANAGEMENT");
        referralmanagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referralmanagementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(riskassessment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(clinicteam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(familyhistory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientmodule, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(medicalcondition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                        .addComponent(referralmanagement, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(112, 112, 112)
                    .addComponent(patientmodule)
                    .addGap(60, 60, 60)
                    .addComponent(medicalcondition)
                    .addGap(60, 60, 60)
                    .addComponent(familyhistory)
                    .addGap(60, 60, 60)
                    .addComponent(clinicteam)
                    .addGap(60, 60, 60)
                    .addComponent(riskassessment)
                    .addGap(60, 60, 60)
                    .addComponent(referralmanagement)
                    .addContainerGap(112, Short.MAX_VALUE)))
        );

        backbtn.setBackground(new java.awt.Color(0, 204, 153));
        backbtn.setText("BACK");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        exitbtn.setBackground(new java.awt.Color(153, 0, 0));
        exitbtn.setText("EXIT");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        clinicmemberIdLabel.setText("ClinicMemberId");

        clinicmemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicmemberIdActionPerformed(evt);
            }
        });

        nameLabel.setText("Name");

        specializationLabel.setText("Specialization");

        specialization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "General Doctor", "Nurses", "Cardiologist", "Adminstration" }));
        specialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specializationActionPerformed(evt);
            }
        });

        viewrecord.setBackground(new java.awt.Color(0, 153, 153));
        viewrecord.setText("VIEW RECORDS");
        viewrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewrecordActionPerformed(evt);
            }
        });

        addclinicteam.setBackground(new java.awt.Color(102, 255, 51));
        addclinicteam.setText("ADD CLINIC TEAMS");
        addclinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addclinicteamActionPerformed(evt);
            }
        });

        editclinicteam.setBackground(new java.awt.Color(255, 153, 51));
        editclinicteam.setText("EDIT CLINIC TEAMS");
        editclinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editclinicteamActionPerformed(evt);
            }
        });

        deleteclinicteam.setBackground(new java.awt.Color(255, 0, 0));
        deleteclinicteam.setText("DELETE CLINIC TEAMS");
        deleteclinicteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteclinicteamActionPerformed(evt);
            }
        });

        clinicteamtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ClinicMemberId", "Name", "Specialization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(clinicteamtbl);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(459, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(clinicmemberIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(specializationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(88, 88, 88)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(clinicmemberId)
                                                    .addComponent(name)
                                                    .addComponent(specialization, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(addclinicteam)
                                                .addGap(29, 29, 29)))
                                        .addGap(38, 38, 38)
                                        .addComponent(editclinicteam))
                                    .addComponent(viewrecord))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteclinicteam)
                                .addGap(386, 386, 386))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(backbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitbtn)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clinicmemberIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clinicmemberId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(specializationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(specialization, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteclinicteam)
                    .addComponent(editclinicteam)
                    .addComponent(viewrecord)
                    .addComponent(addclinicteam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitbtn)
                    .addComponent(backbtn)))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        new Welcome().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitbtnActionPerformed

    private void clinicmemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicmemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clinicmemberIdActionPerformed

    private void specializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specializationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specializationActionPerformed

    private void viewrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewrecordActionPerformed
        // TODO add your handling code here:

        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");
            Statement st = con.createStatement();
            String sql = "Select * from clinicteamtbl";
            PreparedStatement ptst = con.prepareStatement(sql);
            ResultSet rs = ptst.executeQuery();
            DefaultTableModel tm = (DefaultTableModel)clinicteamtbl.getModel();
            tm.setRowCount(0);
            while (rs.next()){
                Object o[] = {rs.getInt("ClinicMemberId"),rs.getString("Name"),rs.getString("Specialization"),
                };
                tm.addRow(o);
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);

        }

    }//GEN-LAST:event_viewrecordActionPerformed

    private void addclinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addclinicteamActionPerformed
        // TODO add your handling code here:

        if (clinicmemberId.getText().isEmpty() && name.getText().isEmpty() && specialization.getSelectedItem() == null ) {

            JOptionPane.showMessageDialog(this, "Missing details!");
        }else{

            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");
                String sql = "INSERT INTO clinicteamtbl VALUES (?, ?, ?)";
                PreparedStatement ptst = con.prepareStatement(sql);

                ptst.setInt(1, Integer.parseInt(clinicmemberId.getText()));
                ptst.setString(2, name.getText());
                ptst.setString(3, specialization.getSelectedItem().toString());

                ptst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Clinic Team added successfully!");

                con.close();
                clinicmemberId.setText("");
                name.setText("");
                specialization.setSelectedIndex(-1); // Clear selection in the combo box
            }

            catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }  }
    }//GEN-LAST:event_addclinicteamActionPerformed

    private void editclinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editclinicteamActionPerformed
        // TODO add your handling code here:
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");
            // Check if the record with the specified clinicmemberId exists in the table
            String checkIfExistsQuery = "SELECT COUNT(*) FROM clinicteamtbl WHERE ClinicMemberId=?";
            PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
            checkIfExistsStmt.setInt(1, Integer.parseInt(clinicmemberId.getText()));
            ResultSet rs = checkIfExistsStmt.executeQuery();
            rs.next();
            int count = rs.getInt(1);
            if (count == 0) {
                // Record with the specified PatientId doesn't exist, handle the situation (e.g., show an error message)
                JOptionPane.showMessageDialog(null, "Record with ClinicMemberId doesn't exist!");
            } else {
                // Record with the specified ClinicMemberId exists, proceed with the update
                String sql = "UPDATE clinicteamtbl SET Name=?, Specialization=? WHERE ClinicMemberId=?";
                // Your update code here...
                PreparedStatement ptst = con.prepareStatement(sql);
                // Setting parameters for the prepared statement

                ptst.setString(1, name.getText());
                ptst.setString(2, specialization.getSelectedItem().toString());
                ptst.setInt(3, Integer.parseInt(clinicmemberId.getText()));

                // Setting PatientId as the last parameter
                int rowsAffected = ptst.executeUpdate();

                // Check if the update was successful
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Record updated successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to update record!");
                }
            }
        } catch (Exception e) {
            // Handle any exceptions that occur during database operations
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

    }//GEN-LAST:event_editclinicteamActionPerformed

    private void deleteclinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteclinicteamActionPerformed
        // TODO add your handling code here:

        if (clinicmemberId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ClinicMemberId is empty!");
        }
        else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/clinicdb","root","");

                // Check if the medical condition ID exists in the medicalconditiontbl table
                String checkIfExistsQuery = "SELECT COUNT(*) FROM clinicteamtbl WHERE ClinicMemberId=?";
                PreparedStatement checkIfExistsStmt = con.prepareStatement(checkIfExistsQuery);
                checkIfExistsStmt.setInt(1, Integer.parseInt(clinicmemberId.getText()));
                ResultSet rs = checkIfExistsStmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "ClinicTeam Member with the specified ID does not exist!");
                } else {
                    // If the medical condition ID exists, proceed with the deletion
                    String deleteQuery = "DELETE FROM clinicteamtbl WHERE ClinicMemberId=?";
                    PreparedStatement deleteStmt = con.prepareStatement(deleteQuery);
                    deleteStmt.setInt(1, Integer.parseInt(clinicmemberId.getText()));

                    int rowsAffected = deleteStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "ClinicTeam Member  deleted successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete ClinicTeam Member !");
                    }

                    // Clear the Medical Condition ID field after deletion
                    clinicmemberId.setText("");
                }

                con.close();

            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_deleteclinicteamActionPerformed

    private void patientmoduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientmoduleActionPerformed
        Patients obj = new Patients();
        obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_patientmoduleActionPerformed

    private void medicalconditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalconditionActionPerformed
        MedicalConditions obj = new MedicalConditions();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_medicalconditionActionPerformed

    private void familyhistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyhistoryActionPerformed
        FamilyHistory obj = new FamilyHistory();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_familyhistoryActionPerformed

    private void clinicteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicteamActionPerformed
        ClinicTeam obj = new ClinicTeam();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_clinicteamActionPerformed

    private void riskassessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_riskassessmentActionPerformed
        riskassessment obj = new riskassessment();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_riskassessmentActionPerformed

    private void referralmanagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referralmanagementActionPerformed
        ReferralManagement obj = new ReferralManagement();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_referralmanagementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClinicTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClinicTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClinicTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClinicTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClinicTeam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addclinicteam;
    private javax.swing.JButton backbtn;
    private javax.swing.JTextField clinicmemberId;
    private javax.swing.JLabel clinicmemberIdLabel;
    private javax.swing.JButton clinicteam;
    private javax.swing.JTable clinicteamtbl;
    private javax.swing.JButton deleteclinicteam;
    private javax.swing.JButton editclinicteam;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton familyhistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton medicalcondition;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton patientmodule;
    private javax.swing.JButton referralmanagement;
    private javax.swing.JButton riskassessment;
    private javax.swing.JComboBox<String> specialization;
    private javax.swing.JLabel specializationLabel;
    private javax.swing.JButton viewrecord;
    // End of variables declaration//GEN-END:variables
}
